# Deployment object. It describes a desired state for Pods.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: counter-deployment
spec:  
  replicas: 1 # It's set to 1 because state is stored in memory. README.md provides more info on scalability
  selector:
    matchLabels:
      app: counter
  template:
    metadata:
      labels:
        app: counter
    spec:
      containers:
      - name: counter
        image: counter:v0.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 4 # number of cores
            memory: "500Mi"
          limits:
            cpu: 4 # fixed because if the number of cores increases golang app needs to be restarted
            memory: "800Mi"
        livenessProbe:
          httpGet:
            path: /health # health check endpoint
            port: 8080
          initialDelaySeconds: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready # readiness check endpoint
            port: 8080
          initialDelaySeconds: 2
          periodSeconds: 10

---
# Service object network access to one or more Pods.
apiVersion: v1
kind: Service
metadata:
  name: counter-service
spec:
  selector:
    app: counter
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080

---
# Ingress object exposes HTTP from outside the cluster to service within the cluster.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: counter-ingress
spec:
  defaultBackend:
    service:
      name: counter-service
      port:
        number: 80
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: counter-service
            port:
              number: 80
